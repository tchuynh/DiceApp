//
//  ContentView.swift
//  Slots-Challenge
//
//  Hello! It's Chris here. Thanks for trying the challenge!
//  Just a quick note before you review this solution.
//  Remember, there are MULTIPLE ways to do anything so if your solution worked,
//  count it as a win!
//  With a little demo like this, don't stress about what is the "best" way.

import SwiftUI
import GameplayKit


struct ContentView: View {
    
    @State var credits = 1000
    @State var slot1 = 1
    @State var slot2 = 1
    @State var slot3 = 1
    @State var diceRoll1 = 1
    @State var diceRoll2 = 1
    @State var roll = 0
    struct ToyShape: Identifiable {
        var type: String
        var count: Double
        var id = UUID()
    }
    var data: [ToyShape] = [
        .init(type: "Cube", count: 5),
        .init(type: "Sphere", count: 4),
        .init(type: "Pyramid", count: 4)
    ]
    
    
    var body: some View {
        ZStack{
            Image("table").ignoresSafeArea()
        
        VStack(spacing: 20.0) {
            
            
            Spacer()
            
            
            Text("SwiftUI Dice").font(.largeTitle).foregroundColor(Color.white)
            Spacer()

            // This is the first time I'm showing you this:
            // Substitute variables/properties into a string with \(var)
            Text("Roll: \(roll)")
            
            HStack {
                // The images were too wide to begin with so make sure you
                // add the resizable and aspectRatio modifiers
                Image("Dice\(slot1)")
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .padding()
                
                Image("Dice\(slot2)")
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .padding()
            }
            Spacer()
            Button("Roll") {
                let random = GKRandomSource()
                let dice3d6 = GKGaussianDistribution(randomSource: random, lowestValue: 1, highestValue: 6)
                
                // Roll the dice...
                diceRoll1 = dice3d6.nextInt()
                diceRoll2 = dice3d6.nextInt()
                
                print(diceRoll1)
                print(diceRoll2)
                

                // Randomize the numbers
                slot1 = Int.random(in: 1...3)
                slot2 = Int.random(in: 1...3)
                slot3 = Int.random(in: 1...3)
                roll = slot1 + slot2
                // Update credits based on match or not
                if slot1 == slot2 && slot2 == slot3 {
                    // Match
                    credits += 15
                }
                else {
                    credits -= 5
                }
            }
            // Set padding for all edges
            .padding()
            // Then adjust the left and right padding to be bigger
            .padding([.leading, .trailing], 40)
            .foregroundColor(.white)
            .background(Color(.systemPink))
            .cornerRadius(25)
            .font(.system(size: 18, weight: .bold, design: .default))
            Spacer()
        }
        
    }
}
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
